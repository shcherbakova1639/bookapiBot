using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http.Json;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bots.Extensions.Polling;


namespace Book_Bot
{
    public class Bot
    {
        private string apiAddress = "https://localhost:7288";
        TelegramBotClient botClient = new TelegramBotClient("6836200135:AAE5Nh3sSCzNUVelWx3c2SWAcpOSwTnlB3Q");
        CancellationToken cancellationToken = new CancellationToken();
        ReceiverOptions receiverOptions = new ReceiverOptions { AllowedUpdates = { } };
        HttpClient client = new HttpClient();
        private readonly Dictionary<long, string> userStates = new Dictionary<long, string>();

        private string lastCommand;
        private string lastTitleName;
        private string lastAuthorName;
        private string lastid;

        public async Task Start()
        {
            botClient.StartReceiving(HandlerUpdateAsync, HandlerError, receiverOptions, cancellationToken);
            var botMe = await botClient.GetMeAsync();
            Console.WriteLine($"{botMe.Username} is working");
            Console.ReadKey();
            

        }

        private Task HandlerError(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var ErrorMassage = exception switch
            {
                ApiRequestException apiRequestException => $"Error in telegram bot API:\n{apiRequestException.ErrorCode}" +
                $"\n{apiRequestException.Message}",
                _ => exception.ToString()
            };
            Console.WriteLine(ErrorMassage);
            return Task.CompletedTask;
        }

        private async Task HandlerUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Type == UpdateType.Message && update?.Message?.Text != null)
            {
                await HandlerMassageAsync(botClient, update.Message);
            }
        }

 
        private async Task HandlerMassageAsync(ITelegramBotClient botClient, Message message)
        {

            switch (message.Text)
            {
                case "/start":
                case "Who am I":
                    await botClient.SendTextMessageAsync(message.Chat.Id, "Hello! I am a book bot. I am here to make your reading funnier! To enter any information reply to the message. Choose the next /option.");
                    break;

                case "/option":
                    var replyKeyboardMarkup = new ReplyKeyboardMarkup(new[]
                     {
                        new [] { new KeyboardButton("Who am I"), new KeyboardButton("Count author's works"), new KeyboardButton("Get All Quotes") },
                        new [] { new KeyboardButton("Get Quote"), new KeyboardButton("Add Quote"), new KeyboardButton("Delete Quote") }
                     })
                    {
                        ResizeKeyboard = true

                    };


                    await botClient.SendTextMessageAsync(message.Chat.Id, "Choose:", replyMarkup: replyKeyboardMarkup);
                    break;

                case "Count author's works":
                    lastCommand = "Count author's works";
                    await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the author:");
                    return;


                case "Get All Quotes":
                    lastCommand = "Get All Quotes";
                    try
                    {
                        var quotes = await GetAll();
                        var responseMessage = string.Join("\n", quotes.Select(q => $"Book: {q.book}, Title: {q.Title}, Author: {q.Author}, Quote: {q.Quote}\n"));
                        await botClient.SendTextMessageAsync(message.Chat.Id, $"Quotes:\n{responseMessage}");
                    }
                    catch (Exception ex)
                    {
                        await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                    }
                    
                    return;

                case "Get Quote":
                    lastCommand = "Get Quote";
                    await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the book's id:");
                    return;

                case "Add Quote":
                    lastCommand = "Add Quote";
                    await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the book's name/id:");
                    return;

                case "Delete Quote":
                    lastCommand = "Delete Quote";
                    await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the book's id to delete the quote:");
                    return;

                default:
                    if (message.ReplyToMessage != null)
                    {
                        if (message.ReplyToMessage.Text == "Enter the author:")
                        {
                            var author = message.Text;
                            try
                            {
                                var count = await CountAuthorWorks(author);
                                await botClient.SendTextMessageAsync(message.Chat.Id, $" {author} mentioned as author {count}");
                            }
                            catch (Exception ex)
                            {
                                await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                            }
                        }

                        else if (message.ReplyToMessage.Text == "Enter the book's id:")
                        {
                            var book = message.Text;
                            try
                            {
                                var quote = await GetQuote(book);
                                if (quote != null)
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, $"Quote from id {book}: {quote.Quote}");
                                }
                                else
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, $"No quote found for the book id {book}");
                                }
                            }
                            catch (Exception ex)
                            {
                                await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                            }

                        }
                        else if (message.ReplyToMessage.Text == "Enter the book's name/id:")
                        {
                            var book = message.Text;
                            if (lastCommand == "Add Quote")
                            {
                                lastid = book;
                                await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the author's name:");
                            }
                            else
                            {
                                try
                                {
                                    var quote = await GetQuote(book);
                                    if (quote != null)
                                    {
                                        await botClient.SendTextMessageAsync(message.Chat.Id, $"Quote from {book}: {quote.Quote}");
                                    }
                                    else
                                    {
                                        await botClient.SendTextMessageAsync(message.Chat.Id, $"No quote found for the book {book} or the quote is empty.");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                                }
                            }
                        }
                        else if (message.ReplyToMessage.Text == "Enter the author's name:" && lastCommand == "Add Quote")
                        {
                            var author = message.Text;
                            lastAuthorName = author;
                            await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the title:");
                        }
                        else if (message.ReplyToMessage.Text == "Enter the title:" && lastCommand == "Add Quote")
                        {
                            var title = message.Text;
                            lastTitleName = title;
                            await botClient.SendTextMessageAsync(message.Chat.Id, "Enter the quote:");
                        }
                        else if (message.ReplyToMessage.Text == "Enter the quote:" && lastCommand == "Add Quote")
                        {
                            var quote = message.Text;
                            try
                            {
                                var result = await AddQuote(lastid, lastAuthorName, lastTitleName, quote);
                                if (result)
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, "Quote added successfully!");
                                }
                                else
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, "Failed to add quote.");
                                }
                            }
                            catch (Exception ex)
                            {
                                await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                            }
                        }
                        else if (lastCommand == "Delete Quote")
                        {
                            if (message.ReplyToMessage.Text == "Enter the book's id to delete the quote:")
                            {
                                var book = message.Text;
                                try
                                {
                                    var result = await DeleteQuote(book);
                                    if (result)
                                    {
                                        await botClient.SendTextMessageAsync(message.Chat.Id, $"Quote from {book} has been deleted.");
                                    }
                                    else
                                    {
                                        await botClient.SendTextMessageAsync(message.Chat.Id, $"Failed to delete quote for the book {book} or no quote found.");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    await botClient.SendTextMessageAsync(message.Chat.Id, $"Error: {ex.Message}");
                                }
                            }
                        }


                    }
                    break;
            }

        }

        
        
        private async Task<int> CountAuthorWorks(string author)
        {
            var response = await client.GetAsync($"{apiAddress}/Search/CountWorks?author={author}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                return int.Parse(result);
            }
            else
            {
                throw new Exception("Failed to get author works count");
            }
        }

        private async Task<List<BookResponse>> GetAll()
        {
            var response = await client.GetAsync($"{apiAddress}/Search/GetAll");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<BookResponse>>(result);
            }
            else
            {
                throw new Exception("Failed to get quotes");
            }
        }

        private async Task<BookResponse> GetQuote(string book)
        {
            var response = await client.GetAsync($"{apiAddress}/Search/GetQuote?book={book}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var quoteResponse = JsonConvert.DeserializeObject<BookResponse>(result);

                // Перевірка на порожню цитату
                if (string.IsNullOrEmpty(quoteResponse.Quote))
                {
                    return null; // або кидайте відповідний виняток, якщо бажаєте
                }

                return quoteResponse;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                return null;
            }
            else
            {
                throw new Exception("Failed to get quote");


            }
        }

        private async Task<bool> AddQuote(string book, string author, string quote, string title)
        {
            var newQuote = new BookResponse
            {
                book = book,
                Title = title,
                Author = author,
                Quote = quote
            };

            var content = new StringContent(JsonConvert.SerializeObject(newQuote), Encoding.UTF8, "application/json");

            var response = await client.PostAsync($"{apiAddress}/Search/addQuote", content);
            return response.IsSuccessStatusCode;
        }

        private async Task<bool> DeleteQuote(string book)
        {
            var response = await client.DeleteAsync($"{apiAddress}/Search/delete?book={book}");
            return response.IsSuccessStatusCode;
        }

    }
}
